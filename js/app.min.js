"use strict";

//---------- Device type-------------------
const deviceType = () => {
  const ua = navigator.userAgent;
  if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {
    return "tablet";
  } else if (
    /Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(
      ua
    )
  ) {
    return "mobile";
  }
  return "desktop";
};

// Slider Hero
if (document.querySelector(".hero__slider")) {
  new Swiper(".hero__slider", {
    direction: "horizontal",
    observer: true,
    observeParents: true,
    slidesPerView: 1,
    spaceBetween: 16,
    watchOverflow: false,
    speed: 800,
    loop: true,
    preloadImages: false,
    parallax: true,
    autoplay: {
      delay: 3000,
    },
  });
}
// Slider recommendation
if (document.querySelector(".recommendation__slider")) {
  new Swiper(".recommendation__slider", {
    direction: "horizontal",
    observer: true,
    observeParents: true,
    slidesPerView: 3,
    spaceBetween: 15,
    watchOverflow: true,
    speed: 800,
    loop: true,
    loopAdditionalSlides: 8,
    preloadImages: false,
    parallax: true,
    autoplay: {
      delay: 3000,
      pauseOnMouseEnter: true,
      disableOnInteraction: false,
    },
    breakpoints: {
      // when window width is >= 0px
      0: {
        slidesPerView: 1,
      },
      // when window width is >= 480px
      480: {
        slidesPerView: 2,
      },
      // when window width is >= 480px
      767: {
        slidesPerView: 3,
      },
    },
    // Navigation arrows
    navigation: {
      nextEl: ".recommendation__slider-controlls .slider-controlls_next",
      prevEl: ".recommendation__slider-controlls .slider-controlls_prew",
    },
  });
}
// Slider sell
if (document.querySelector(".sell__slider")) {
  new Swiper(".sell__slider", {
    effect: "fade",
    observer: true,
    observeParents: true,
    slidesPerView: 1,
    spaceBetween: 15,
    watchOverflow: true,
    speed: 1500,
    loop: true,
    loopAdditionalSlides: 8,
    preloadImages: false,
    parallax: true,
    autoplay: {
      delay: 5000,
      pauseOnMouseEnter: true,
      disableOnInteraction: false,
      reverseDirection: true,
    },
    breakpoints: {
      // when window width is >= 640px
      767: {
        spaceBetween: 40,
      },
    },
  });
}
// Slider sreview
if (document.querySelector(".review__slider")) {
  new Swiper(".review__slider", {
    direction: "horizontal",
    observer: true,
    observeParents: true,
    slidesPerView: 1,
    spaceBetween: 15,
    watchOverflow: true,
    speed: 800,
    //  loop: true,
    loopAdditionalSlides: 8,
    preloadImages: false,
    parallax: true,
    autoplay: {
      delay: 5000,
      pauseOnMouseEnter: true,
      disableOnInteraction: false,
    },
    pagination: {
      el: ".swiper-pagination",
      clickable: true,
    },
    breakpoints: {
      // when window width is >= 640px
      767: {
        spaceBetween: 56,
      },
    },
  });
}

	// Dynamic Adapt v.1
	// HTML data-da="where(uniq class name),when(breakpoint),position(digi)"
	// e.x. data-da=".item,992,2"
	// Andrikanych Yevhen 2020
	function DynamicAdapt(type) {
		this.type = type;
	}
	
	DynamicAdapt.prototype.init = function () {
		const _this = this;
		// массив объектов
		this.оbjects = [];
		this.daClassname = "_dynamic_adapt_";
		// массив DOM-элементов
		this.nodes = document.querySelectorAll("[data-da]");
	
		// наполнение оbjects объктами
		for (let i = 0; i < this.nodes.length; i++) {
			const node = this.nodes[i];
			const data = node.dataset.da.trim();
			const dataArray = data.split(",");
			const оbject = {};
			оbject.element = node;
			оbject.parent = node.parentNode;
			оbject.destination = document.querySelector(dataArray[0].trim());
			оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : "992";
			оbject.place = dataArray[2] ? dataArray[2].trim() : "last";
			оbject.index = this.indexInParent(оbject.parent, оbject.element);
			this.оbjects.push(оbject);
		}
	
		this.arraySort(this.оbjects);
	
		// массив уникальных медиа-запросов
		this.mediaQueries = Array.prototype.map.call(this.оbjects, function (item) {
			return '(' + this.type + "-width: " + item.breakpoint + "px)," + item.breakpoint;
		}, this);
		this.mediaQueries = Array.prototype.filter.call(this.mediaQueries, function (item, index, self) {
			return Array.prototype.indexOf.call(self, item) === index;
		});
	
		// навешивание слушателя на медиа-запрос
		// и вызов обработчика при первом запуске
		for (let i = 0; i < this.mediaQueries.length; i++) {
			const media = this.mediaQueries[i];
			const mediaSplit = String.prototype.split.call(media, ',');
			const matchMedia = window.matchMedia(mediaSplit[0]);
			const mediaBreakpoint = mediaSplit[1];
	
			// массив объектов с подходящим брейкпоинтом
			const оbjectsFilter = Array.prototype.filter.call(this.оbjects, function (item) {
				return item.breakpoint === mediaBreakpoint;
			});
			matchMedia.addListener(function () {
				_this.mediaHandler(matchMedia, оbjectsFilter);
			});
			this.mediaHandler(matchMedia, оbjectsFilter);
		}
	};
	
	DynamicAdapt.prototype.mediaHandler = function (matchMedia, оbjects) {
		if (matchMedia.matches) {
			for (let i = 0; i < оbjects.length; i++) {
				const оbject = оbjects[i];
				оbject.index = this.indexInParent(оbject.parent, оbject.element);
				this.moveTo(оbject.place, оbject.element, оbject.destination);
			}
		} else {
			for (let i = 0; i < оbjects.length; i++) {
				const оbject = оbjects[i];
				if (оbject.element.classList.contains(this.daClassname)) {
					this.moveBack(оbject.parent, оbject.element, оbject.index);
				}
			}
		}
	};
	
	// Функция перемещения
	DynamicAdapt.prototype.moveTo = function (place, element, destination) {
		element.classList.add(this.daClassname);
		if (place === 'last' || place >= destination.children.length) {
			destination.insertAdjacentElement('beforeend', element);
			return;
		}
		if (place === 'first') {
			destination.insertAdjacentElement('afterbegin', element);
			return;
		}
		destination.children[place].insertAdjacentElement('beforebegin', element);
	}
	
	// Функция возврата
	DynamicAdapt.prototype.moveBack = function (parent, element, index) {
		element.classList.remove(this.daClassname);
		if (parent.children[index] !== undefined) {
			parent.children[index].insertAdjacentElement('beforebegin', element);
		} else {
			parent.insertAdjacentElement('beforeend', element);
		}
	}
	
	// Функция получения индекса внутри родителя
	DynamicAdapt.prototype.indexInParent = function (parent, element) {
		const array = Array.prototype.slice.call(parent.children);
		return Array.prototype.indexOf.call(array, element);
	};
	
	// Функция сортировки массива по breakpoint и place 
	// по возрастанию для this.type = min
	// по убыванию для this.type = max
	DynamicAdapt.prototype.arraySort = function (arr) {
		if (this.type === "min") {
			Array.prototype.sort.call(arr, function (a, b) {
				if (a.breakpoint === b.breakpoint) {
					if (a.place === b.place) {
						return 0;
					}
	
					if (a.place === "first" || b.place === "last") {
						return -1;
					}
	
					if (a.place === "last" || b.place === "first") {
						return 1;
					}
	
					return a.place - b.place;
				}
	
				return a.breakpoint - b.breakpoint;
			});
		} else {
			Array.prototype.sort.call(arr, function (a, b) {
				if (a.breakpoint === b.breakpoint) {
					if (a.place === b.place) {
						return 0;
					}
	
					if (a.place === "first" || b.place === "last") {
						return 1;
					}
	
					if (a.place === "last" || b.place === "first") {
						return -1;
					}
	
					return b.place - a.place;
				}
	
				return b.breakpoint - a.breakpoint;
			});
			return;
		}
	};
	
	const da = new DynamicAdapt("max");
	da.init();
// Menu burger
const menuIcon = document.querySelector(".menu__icon");
const menuBody = document.querySelector(".menu__body");
const body = document.querySelector("body");

menuIcon.addEventListener("click", () => {
  menuBody.classList.toggle("_active");
  menuIcon.classList.toggle("_active");
  body.classList.toggle("_lock");
});

// Mobile dropdown menu
if (deviceType() == "mobile" || deviceType() == "tablet") {
  document.body.classList.add("_touch");
  const menuArrows = document.querySelectorAll("._icon-icon-right");
  if (menuArrows.length > 0) {
    for (let index = 0; index < menuArrows.length; index++) {
      const menuArrow = menuArrows[index];
      menuArrow.addEventListener("click", function (e) {
        menuArrow.closest(".menu__item").classList.toggle("_active");
      });
    }
  }
} else {
  document.body.classList.add("_pc");
}

const formInputs = document.querySelectorAll(".search-form__input");

formInputs.forEach((formInput) => {
  formInput.addEventListener("focus", () => {
    formInput.closest(".search-form").style.border = "solid 0.1rem #10b981";
  });
  formInput.addEventListener("focusout", () => {
    formInput.closest(".search-form").style.border = "solid 0.1rem #e0e3eb";
  });
});

// Tabs
const tabs = document.querySelector(".tabs");
if (tabs) {
  const tabItems = document.querySelectorAll(".tabs__item");
  const tabsContent = document.querySelectorAll(".tabs__content");

  tabItems.forEach((tab, index) => {
    const interval = setInterval(function () {
      window.dispatchEvent(new Event("resize"));
    }, 1000);
    setTimeout(function () {
      clearInterval(setInterval);
    }, 5000);
    tab.addEventListener("click", () => {
      tabsContent.forEach((content) => {
        content.classList.remove("_active");
      });
      tabItems.forEach((tab) => {
        tab.classList.remove("_active");
      });
      tabItems[index].classList.add("_active");
      tabsContent[index].classList.add("_active");
    });
  });
}

// Fixed header on Scroll
const header = document.querySelector("header");

document.addEventListener("scroll", (e) => {
  const windowScroll = window.scrollY;
  const headerPosition = windowScroll;
  if (headerPosition >= 8) {
    header.classList.add("_scroll");
  } else if (headerPosition <= 8) {
    header.classList.remove("_scroll");
  }
});
